# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3 
      # Installs node modules
      - name: Check out Source Code
        uses: actions/checkout@v2
      - name: Setup Nodejs
        uses: actions/setup-node@v1

      # # steps
      # # configure GCR credentials
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v0.4.0'
      #   with:
      #     credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}' 
      #     project_id: ${{ secrets.PROJECT_ID }}
      #     # export_default_credentials: true

      #   # Configure docker to use the gcloud command-line tool as a credential helper
      # - name: 'Set up Cloud SDK'
      #   uses: 'google-github-actions/setup-gcloud@v0'
      
      # - name: 'Set docker configuration'
      #   run: |
      #     gcloud auth configure-docker europe-west1-docker.pkg.dev

      # - name: Building Docker Image
      #   env:
      #     IMAGE_TAG: ${{ github.sha }}
      #     PROJECT_ID: ${{ secrets.PROJECT_ID}}
      #   run: |
      #     ls -al
      #     docker build -t europe-west1-docker.pkg.dev/$PROJECT_ID/first-image/$IMAGE_TAG .
      #     echo "docker built"
      #   # Push image to Google Container Registry
      # - name: Pushing Image to Google Artifact registry,
      #   env:
      #     PROJECT_ID: ${{ secrets.PROJECT_ID}}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker push europe-west1-docker.pkg.dev/$PROJECT_ID/first-image/$IMAGE_TAG
      # - name: Deploy Docker image to Google Cloud Run 
      #   env:
      #     PROJECT_ID: ${{ secrets.PROJECT_ID}}
      #     IMAGE_TAG: ${{ github.sha }}
      #     REPO_NM: first-image
      #     MY_REGION: europe-west1
      #     DB_VARS: ${{ secrets.DB_CONFIGS}}
      #   run: |
      #     gcloud run deploy "$REPO_NM" --platform managed --allow-unauthenticated --set-env-vars "$DB_VARS" --region "$MY_REGION" --image europe-west1-docker.pkg.dev/$PROJECT_ID/$REPO_NM/$IMAGE_TAG 
          
        # configure Azure credentials
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
        
      - run: |
            docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:${{ github.sha }}

      - name: 'Deploy to Azure Container Instances'
        uses: 'azure/aci-deploy@v1'
        env:
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_NAME: backend
          REPO: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          U_NAME: ${{ secrets.REGISTRY_USERNAME }}
          PSWD: ${{ secrets.REGISTRY_PASSWORD }}
          R_GRP : ${{ secrets.RESOURCE_GROUP }}
        with:
            resource-group: $R_GRP
            dns-name-label: $R_GRP ${{ github.run_number }}
            image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/backend:${{ github.sha }}
            registry-login-server: $REPO
            registry-username: $U_NAME
            registry-password: $PSWD
            name: backend
            location: 'east us'
            

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
      #     aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws-region: us-east-1

      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      
      # - name: Build tag and push to ECR in AWS
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/backend:$IMAGE_TAG .
      #     echo "Pushing to ECR ..."
      #     docker push $ECR_REGISTRY/backend:$IMAGE_TAG
      #     echo "image=$ECR_REGISTRY/backend:$IMAGE_TAG"  >> $GITHUB_ENV
      
      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition sample-app-task-def --query taskDefinition > sample-app-task-def.json
      #     echo "::set-output name=taskdef::sample-app-task-def.json"
      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: sample-app-task-def.json
      #     container-name: sample
      #     image: ${{ env.image}}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: sample-app-service-3
      #     cluster: default
      #     wait-for-service-stability: false
